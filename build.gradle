plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "3.2.3"
    id "io.spring.dependency-management" version "1.1.4"
    id "com.diffplug.spotless" version "6.25.0"
}

group = "me.oussamamessaoudi"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = "17"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = "2023.0.0"
    mapstructVersion = "1.5.5.Final"
    cucumberVersion = "latest.release"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "io.micrometer:micrometer-tracing"
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.flywaydb:flyway-core"
    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "com.h2database:h2"
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"
    testImplementation "org.junit.platform:junit-platform-suite"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

compileJava {
    dependsOn spotlessApply
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/code-coverage/result.xml')
    }
}
